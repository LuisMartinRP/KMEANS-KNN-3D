/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package knn3d;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jzy3d.colors.Color;
import java.util.Random;

/**
 *
 * @author Luis Martin R.P
 */
public class KNN3D extends javax.swing.JFrame {
    Random ran = new Random();
    String td;
    int nump,cr,cg,cb,c;
    float x,y,z,xc,yc,zc;
    int[]id,re,gr,bl;
    float[]dist;
    boolean clas,generados;
    float distancia;
    ArrayList<Punto> puntos = new ArrayList<Punto>();
    ArrayList<Punto> centros = new ArrayList<Punto>();
    ArrayList<Punto> aux1 = new ArrayList<Punto>();
    ArrayList<Punto> aux2 = new ArrayList<Punto>();
    Color colores[];

    /**
     * Creates new form KNN3D
     */
    public KNN3D() {
        initComponents();
        jcbd.addItem("Euclidiana");
        jcbd.addItem("Manhattan");
        jcbd.addItem("Minkowski");
        jcbd.addItem("Chevisev");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpp = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfnp = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtfx = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfy = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtfz = new javax.swing.JTextField();
        jcbd = new javax.swing.JComboBox<>();
        jbgp = new javax.swing.JButton();
        jbc = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jtflx = new javax.swing.JTextField();
        jtfly = new javax.swing.JTextField();
        jtflz = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jtfk = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jtfca = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Numero de puntos:");

        jLabel2.setText("Limite x:");

        jLabel3.setText("Limite y:");

        jLabel4.setText("Limite z:");

        jbgp.setText("Generar puntos.");
        jbgp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbgpActionPerformed(evt);
            }
        });

        jbc.setText("Clasificar.");
        jbc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbcActionPerformed(evt);
            }
        });

        jLabel5.setText("Valores maximos de los ejes.");

        jLabel6.setText("Coordenadas del punto a clasificar.");

        jLabel7.setText("Coordenada x:");

        jLabel8.setText("Coordenada y:");

        jLabel9.setText("Coordenada z:");

        jLabel10.setText("Selecciona un tipo de distancia.");

        jLabel11.setText("Numero de vecinos:");

        jLabel12.setText("Clase asignada:");

        jButton1.setText("Regraficar puntos.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jppLayout = new javax.swing.GroupLayout(jpp);
        jpp.setLayout(jppLayout);
        jppLayout.setHorizontalGroup(
            jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jppLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jppLayout.createSequentialGroup()
                        .addGroup(jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(jppLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(jtfy, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(107, 107, 107)
                                .addComponent(jbc)))
                        .addContainerGap(188, Short.MAX_VALUE))
                    .addGroup(jppLayout.createSequentialGroup()
                        .addGroup(jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jppLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(jtfz, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(jppLayout.createSequentialGroup()
                                        .addComponent(jbgp)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton1))
                                    .addComponent(jLabel5)
                                    .addGroup(jppLayout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(jtfnp, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jppLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(jtflx, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(jtfly, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(jtflz, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jppLayout.createSequentialGroup()
                                    .addComponent(jcbd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(329, 329, 329)))
                            .addGroup(jppLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(jtfx, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66)
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(jtfk, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 144, Short.MAX_VALUE))))
            .addGroup(jppLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(jtfca, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jppLayout.setVerticalGroup(
            jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jppLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtflx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jtfly, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jtflz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfnp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbgp)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jtfx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jtfk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jtfy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbc))
                .addGap(18, 18, 18)
                .addGroup(jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jtfz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jcbd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addGroup(jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jtfca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbgpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbgpActionPerformed
        // TODO add your handling code here:
        boolean termina=false;
        generados=false;
        c=(int)(Math.random()*5)+1;
        if(c==1){
            c+=1;
        }
        puntos = new ArrayList<Punto>();
        colores=new Color[c];
        re=new int[c];
        gr=new int[c];
        bl=new int[c];
        if(jtfnp.getText().equals(""))
            JOptionPane.showMessageDialog(null, "No has ingresado un numero de puntos.");
        else{
            nump=Integer.parseInt(jtfnp.getText());
            try {
                    generarpuntos(nump);
                    while(!termina){
                        aux1=centros;
                        clasificarpuntos(c);
                        centros=aux2;
                        for(int j=0;j<centros.size();j++){
                            for(Punto p:aux1){
                                if(p.x==aux2.get(j).x&&p.y==aux2.get(j).y&&p.z==aux2.get(j).z){                                       
                                    termina=true;
                                }else{
                                    termina=false;           
                                }
                            }
                        } 
                    }
                    for(int i=0;i<c;i++){
                        cr=ran.nextInt(255);
                        cg=ran.nextInt(255);
                        cb=ran.nextInt(255);
                        colores[i] = new Color(cr,cg,cb);
                        re[i]=cr;
                        gr[i]=cg;
                        bl[i]=cb;
                    }
                    P3d pl=new P3d(puntos,colores,c);
                    pl.paint();
                    Nomcla f=new Nomcla(jpp,c,re,gr,bl);
                    f.paint();
            } catch (Exception ex) {
                Logger.getLogger(KNN3D.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_jbgpActionPerformed

    private void jbcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbcActionPerformed
        // TODO add your handling code here:
        if(!generados){
            JOptionPane.showMessageDialog(null, "Genera puntos primero.");
        }else{
            if(!(jtfk.getText().equals(""))){
                int k=Integer.parseInt(jtfk.getText());
                if(k>nump||k==0){
                    JOptionPane.showMessageDialog(null, "K no puede ser mas grande que el numero de puntos.\nk no pude ser 0.");
                }else{
                    if(jtfx.getText().equals("")&&jtfy.getText().equals("")&&jtfz.getText().equals("")){
                        JOptionPane.showMessageDialog(null, "Los campos de coordenadas no pueden estar vacios.");
                    }else{
                        float xsum,ysum,zsum;
                        xc=Float.valueOf(jtfx.getText());
                        yc=Float.valueOf(jtfy.getText());
                        zc=Float.valueOf(jtfz.getText());
                        td=(String) jcbd.getSelectedItem();
                        if(td.equals("Minkowski")){
                            int exp=(int) (Math.random()*2);
                            if(exp==0){
                                td="Manhattan";
                            }
                            if(exp==1){
                                td="Euclidiana";
                            }
                            //System.out.println(exp);
                        }
                        dist=new float[puntos.size()];
                        id=new int[puntos.size()];
                        if(xc<=x&&yc<=y&&zc<=z){
                            try {
                                for(int i=0;i<puntos.size();i++){
                                    switch(td){
                                        case "Euclidiana":
                                            distancia=(float) Math.sqrt(Math.pow(xc-puntos.get(i).x,2)+Math.pow(yc-puntos.get(i).y,2)+Math.pow(zc-puntos.get(i).z,2));
                                            break;
                                        case "Manhattan":
                                            distancia=(float) (Math.abs(xc-puntos.get(i).x)+Math.abs(yc-puntos.get(i).y)+Math.abs(zc-puntos.get(i).z));
                                            break;
                                        case "Chevisev":
                                            System.out.println("che");
                                            xsum=(float) Math.abs(xc-puntos.get(i).x);
                                            ysum=(float) Math.abs(yc-puntos.get(i).y);
                                            zsum=(float) Math.abs(zc-puntos.get(i).z);
                                            if(ysum>xsum){
                                                if(ysum>zsum){
                                                    distancia=ysum;
                                                }else{
                                                    distancia=zsum;
                                                }
                                            }else{
                                                if(xsum>zsum){
                                                    distancia=xsum;
                                                }else{
                                                    distancia=zsum;
                                                }
                                            }
                                            break;
                                    }
                                    dist[i]=distancia;
                                    id[i]=i;
                                }
                                //System.out.println(c);               
                                ordenar(dist,id);
                                int claseobt=prediccion(id,k,puntos);
                                Punto p=new Punto();
                                p.x=xc;
                                p.y=yc;
                                p.z=zc;
                                p.clase=claseobt;
                                jtfca.setText(String.valueOf(claseobt));
                                puntos.add(p);
                                P3d pl=new P3d(puntos,colores,c);
                                pl.paint();
                                //puntos.remove(puntos.size()-1);
                            } catch (Exception ex) {
                                Logger.getLogger(KNN3D.class.getName()).log(Level.SEVERE, null, ex);
                            }
                    }else{
                        JOptionPane.showMessageDialog(null, "Cada coordenada no puede superar a su limite.");
                    }
                }
            }
            }else{
                 JOptionPane.showMessageDialog(null, "K no puede estar vacio.");
            }
        }
    }//GEN-LAST:event_jbcActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(generados){
            try {
                P3d pl=new P3d(puntos,colores,c);
                pl.paint();
            } catch (Exception ex) {
                Logger.getLogger(KNN3D.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(null, "No hay puntos generados.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KNN3D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KNN3D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KNN3D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KNN3D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KNN3D().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton jbc;
    private javax.swing.JButton jbgp;
    private javax.swing.JComboBox<String> jcbd;
    private javax.swing.JPanel jpp;
    private javax.swing.JTextField jtfca;
    private javax.swing.JTextField jtfk;
    private javax.swing.JTextField jtflx;
    private javax.swing.JTextField jtfly;
    private javax.swing.JTextField jtflz;
    private javax.swing.JTextField jtfnp;
    private javax.swing.JTextField jtfx;
    private javax.swing.JTextField jtfy;
    private javax.swing.JTextField jtfz;
    // End of variables declaration//GEN-END:variables

    private void generarpuntos(int np) {
        if(jtflx.getText().equals("")||jtfly.getText().equals("")||jtflz.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Los campos de limites no pueden estar vacios.");
        }else{
            x=Float.valueOf(jtflx.getText());
            y=Float.valueOf(jtfly.getText());
            z=Float.valueOf(jtflz.getText());
            for(int i=0;i<np;i++){
                Punto p=new Punto();
                p.generar(x,y,z);
                puntos.add(p);
            }
            generados=true;
        }
    }

    private void clasificarpuntos(int c) {
        dist=new float[c];
        for(int i=0;i<c;i++){
            Punto p=new Punto();
            p.generar(x,y,z);
            centros.add(p);
        }
        id=new int[c];
        for(Punto p:puntos){
            for(int i=0;i<c;i++){
                distancia=(float) Math.sqrt(Math.pow(p.x-centros.get(i).x,2)+Math.pow(p.y-centros.get(i).y,2)+Math.pow(p.z-centros.get(i).z,2));
                dist[i]=distancia;
                id[i]=i;
            }
            p.clase=obtenerclase(dist,id);
        }
        calculaCentroide(puntos,c);
    }

    private int obtenerclase(float[] dist, int[] id) {
        for(int i=1;i<dist.length;i++){
            float auxc=dist[i];
            int aux3=id[i];
            int j=i-1;
            while(j>=0&&dist[j]>auxc){
                dist[j+1]=dist[j];
                id[j+1]=id[j];
                j--;
            }
            dist[j+1]=auxc;
            id[j+1]=aux3;
        }
        return id[0];
    }

    private void calculaCentroide(ArrayList<Punto> puntos, int c) {
        float xsum=0;
        float ysum=0;
        float zsum=0;
        int cont=0;
        for(int i=0;i<c;i++){
            xsum=0;
            ysum=0;
            zsum=0;
            cont=0;
            for(Punto p:puntos){
                if(p.clase==i){
                    xsum+=p.x;
                    ysum+=p.y;
                    zsum+=p.z;
                    cont++;
                }
            }
            Punto pu=new Punto();
            if(cont!=0){
                pu.x=xsum/cont;
                pu.y=ysum/cont;
                pu.z=zsum/cont;
                aux2.add(pu);
            }
        }
    }
    private void ordenar(float[]dist,int[]id){
        for(int i=1;i<dist.length;i++){
            double auxc=dist[i];
            int aux4=id[i];
            int j=i-1;
            while(j>=0&&dist[j]>auxc){
                dist[j+1]=dist[j];
                id[j+1]=id[j];
                j--;
            }
            dist[j+1]=(float) auxc;
            id[j+1]=aux4;
        }
    }
    
    public int prediccion(int[]id,int k,ArrayList<Punto> puntos){
        int vc[]=new int[k];

        int cont=0;
        for(int i=0;i<k;i++){
            vc[i]=puntos.get(id[i]).clase;
        }
        
        int num_mas_usado = 0;
        int veces[]=new int[k];
        int posicion = 0;
        
        for(int i = 0; i < k; i++){
            num_mas_usado = vc[i];
            for(int j = i; j < k; j++){
                if(vc[j] == num_mas_usado){
                    veces[i]++;
                }
            }
        }
        
        num_mas_usado = 0;
        for(int i = 0; i < k; i++){
            if(num_mas_usado < veces [i]){
                num_mas_usado = veces [i];
                posicion = i;
            }
        }
        //System.out.println(vc[posicion]);
        return vc[posicion];
    }
}
